name: CI

on:
  pull_request:
  push:
#    branches-ignore:
#      - 'feature/**'
  workflow_dispatch:
    inputs:
      perform_release:
        description: 'Perform release'
        default: false
        type: boolean
      bump:
        description: 'Bump type'
        required: false
        default: 'next'
        type: choice
        options:
          - 'next'
          - 'major'
          - 'minor'
          - 'patch'

jobs:
  test:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ ubuntu-22.04, macos-12 ]
      fail-fast: false
    name: Test ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master
      - name: Install libraries for Linux/Mac
        if: contains(matrix.os, 'ubuntu') || contains(matrix.os, 'macos')
        run: brew install webp jpeg-xl libheif
        env:
          HOMEBREW_NO_INSTALL_CLEANUP: 1
          HOMEBREW_NO_INSTALLED_DEPENDENTS_CHECK: 1
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'liberica'
          java-version: '21'
      - name: Gradle build
        env:
          LD_LIBRARY_PATH: /home/linuxbrew/.linuxbrew/lib
          JAVA_LIBRARY_PATH: /usr/local/lib/
        run: ./gradlew build
      - name: Upload Unit Test Reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-reports-${{ matrix.os }}
          path: '**/build/reports/tests/'
  version:
    runs-on: macos-latest
    if: github.repository_owner == 'youtaqiu' && github.ref == 'refs/heads/main'
    outputs:
      version_current: ${{ steps.versions.outputs.version_current }}
      version_next: ${{ steps.versions.outputs.version_next }}
      should_release: ${{ steps.versions.outputs.should_release }}
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Set up Homebrew
        id: set-up-homebrew
        uses: Homebrew/actions/setup-homebrew@master
      - name: Install svu
        run: brew install caarlos0/tap/svu
      - name: Compute next version for release
        if: inputs.perform_release
        run: |
          VERSION_NEXT=$(svu --pattern="v[0-9]*" --strip-prefix ${{ inputs.bump }})
          VERSION_NEXT_SUFFIX=$(svu --pattern="v[0-9]*" --strip-prefix ${{ inputs.bump }})
          echo "VERSION_NEXT=${VERSION_NEXT}" | tee -a $GITHUB_ENV
          echo "VERSION_NEXT_SUFFIX=${VERSION_NEXT_SUFFIX}" | tee -a $GITHUB_ENV
      - name: Compute next version for snapshot
        if: inputs.perform_release != true
        run: |
          VERSION_NEXT=$(svu --pattern="v[0-9]*" --strip-prefix next)
          VERSION_NEXT_SUFFIX=$(svu --pattern="v[0-9]*" --strip-prefix next)-SNAPSHOT
          echo "VERSION_NEXT=${VERSION_NEXT}" | tee -a $GITHUB_ENV
          echo "VERSION_NEXT_SUFFIX=${VERSION_NEXT_SUFFIX}" | tee -a $GITHUB_ENV
      - name: Set Versions
        id: versions
        run: |
          VERSION_CURRENT=$(svu --pattern="v[0-9]*" --strip-prefix current)
          VERSION_NEXT=${{ env.VERSION_NEXT_SUFFIX }}
          echo "version_current=${VERSION_CURRENT}" >> $GITHUB_OUTPUT
          echo "version_next=${VERSION_NEXT}" >> $GITHUB_OUTPUT
          if [ "${VERSION_CURRENT}" != "${VERSION_NEXT}" ]; then
            echo "should_release=true" >> $GITHUB_OUTPUT
            echo "Should release: true"
          else
            echo "should_release=false" >> $GITHUB_OUTPUT
            echo "Should release: false"
          fi
  release:
    needs: [ version, test ]
    runs-on: ubuntu-latest
    if: needs.version.outputs.should_release
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Display versions
        run: |
          echo "Current version: ${{ needs.version.outputs.version_current }}, should release: ${{ needs.version.outputs.version_next }}"
      - name: Update version in gradle.properties
        run: echo "version=${{ needs.version.outputs.version_next }}" > gradle.properties
      - name: Setup Java
        uses: actions/setup-java@v4
        with:
          distribution: 'liberica'
          java-version: '21'
      - name: Nexus publish
        run: ./gradlew publish
      - name: Release commit and push
        uses: EndBug/add-and-commit@v9
        if: inputs.perform_release
        with:
          message: 'chore(release): ${{ needs.version.outputs.version_next }} [skip ci]'
          default_author: github_actions
      - name: JReleaser full release
        if: inputs.perform_release
        env:
          ORG_GRADLE_PROJECT_signingKey: ${{ secrets.GPG_KEY }}
          JRELEASER_GPG_PASSPHRASE: ${{ secrets.GPG_PASSPHRASE }}
          JRELEASER_MAVENCENTRAL_USERNAME: ${{ secrets.MAVENCENTRAL_USER }}
          JRELEASER_MAVENCENTRAL_PASSWORD: ${{ secrets.MAVENCENTRAL_PASSWORD }}
          JRELEASER_GPG_PUBLIC_KEY: ${{ secrets.GPG_PUBLIC_KEY }}
          JRELEASER_GPG_SECRET_KEY: ${{ secrets.GPG_SECRET_KEY }}
          JRELEASER_GITHUB_TOKEN: ${{ secrets.GIT_TOKEN }}
        run: ./gradlew jreleaserFullRelease